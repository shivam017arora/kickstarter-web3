{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/Project.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// Target Value needs to be greater than MINIMUM_TARGET_AMOUNT.\nerror NeedToSetHigherTarget(uint256 given, uint256 required);\n\n/// Min Fund Value needs to be greater than MINIMUM_FUND_RAISE_AMOUNT.\nerror NeedToSetHigherMinFundPrice(uint256 given, uint256 required);\n\n// Funding needs to be greater than set amount\nerror SpendMoreEth();\n\n// State needs to be awaiting in order to fund project\nerror NotInAwaitingFunding();\n\n// Only Owner can Withdraw\nerror NotProjectOwner();\n\n// Can only withdraw after marked as complete\nerror NotFundingComplete();\n\n/**\n * @title ProjectManagerContract\n * @author Shivam Arora\n * @dev Project Management Contract allows users to create projects and manage them\n */\n\ncontract Project is Ownable {\n    //State\n    enum State {\n        AWAITING_FUNDING,\n        FUNDING_COMLPETE,\n        OVER\n    }\n\n    // Validation Constants\n    uint256 private constant MINUMUM_TARGET_AMOUNT = 10 ether;\n    uint256 private constant MINIMUM_FUND_RAISE_AMOUNT = 1 ether;\n\n    // Project variables\n    bytes32 public immutable ipfs_cid;\n    uint16 public immutable i_projectID;\n    uint256 public immutable i_target_price;\n    uint256 public immutable i_deadline_date_unix;\n    uint256 public immutable i_minimum_fund_price_in_eth;\n    string public s_title;\n    string public s_description;\n    address public immutable i_projectOwner;\n    uint256 public s_totalFundingAmount;\n    State public s_projectState;\n\n    //Store information about amount a fund raiser has raised\n    mapping(address => uint256) public addressToAmount;\n    address[] public project_funders;\n\n    //Constructor\n    constructor(\n        uint16 _projectID,\n        string memory _title,\n        string memory _description,\n        uint256 _project_target_price,\n        uint256 _project_deadline_date_unix,\n        uint256 _project_minimum_fund_price,\n        address _projectOwner,\n        bytes32 _cid\n    ) {\n        //Validate\n        if (_project_target_price * 1 ether <= MINUMUM_TARGET_AMOUNT) {\n            revert NeedToSetHigherTarget(\n                _project_target_price,\n                MINUMUM_TARGET_AMOUNT\n            );\n        }\n        if (\n            _project_minimum_fund_price * 1 ether <= MINIMUM_FUND_RAISE_AMOUNT\n        ) {\n            revert NeedToSetHigherMinFundPrice(\n                _project_minimum_fund_price,\n                MINIMUM_FUND_RAISE_AMOUNT\n            );\n        }\n\n        i_projectID = _projectID;\n        i_target_price = _project_target_price * 1 ether;\n        i_deadline_date_unix = _project_deadline_date_unix;\n        i_minimum_fund_price_in_eth = _project_minimum_fund_price * 1 ether;\n        s_title = _title;\n        s_description = _description;\n        s_projectState = State.AWAITING_FUNDING;\n        i_projectOwner = _projectOwner;\n        ipfs_cid = _cid;\n    }\n\n    //Functions\n    function fund() public payable {\n        if (msg.value <= i_minimum_fund_price_in_eth) {\n            revert SpendMoreEth();\n        }\n        if (s_projectState != State.AWAITING_FUNDING) {\n            revert NotInAwaitingFunding();\n        }\n        project_funders.push(msg.sender);\n        addressToAmount[msg.sender] = msg.value;\n        s_totalFundingAmount += msg.value;\n    }\n\n    function markFundingComplete() public onlyOwner {\n        s_projectState = State.FUNDING_COMLPETE;\n    }\n\n    function withdraw() public payable {\n        if (msg.sender != i_projectOwner) {\n            revert NotProjectOwner();\n        }\n        if (s_projectState != State.FUNDING_COMLPETE) {\n            revert NotFundingComplete();\n        }\n        //since reading from storage is expensive, we only do it once\n        address[] memory m_funders = project_funders;\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < m_funders.length;\n            funderIndex++\n        ) {\n            address funder = m_funders[funderIndex];\n            addressToAmount[funder] = 0;\n        }\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: s_totalFundingAmount\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n\n        s_totalFundingAmount = 0;\n        project_funders = new address[](0);\n        s_projectState = State.OVER;\n    }\n\n    //if someone sends this contract ETH without calling the fund function\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    // View Functions\n    function getProjectDetails()\n        public\n        view\n        returns (string memory _title, string memory _description)\n    {\n        return (s_title, s_description);\n    }\n}\n"
    },
    "contracts/ProjectFactory.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Project.sol\";\n\n/**\n * @title ProjectManagerContract\n * @author Shivam Arora\n * @dev Project Management Contract allows users to create projects and manage them\n */\n\ncontract ProjectFactory is Ownable {\n    //Library\n    using Counters for Counters.Counter;\n\n    //State\n    Counters.Counter private _contractId;\n\n    struct ProjectEntity {\n        uint16 projectId;\n        address projectAddress;\n    }\n\n    // Array to store all projects\n    ProjectEntity[] private projects;\n\n    event ProjectStarted(\n        uint16 _projectID,\n        string _title,\n        string _description,\n        uint256 _project_target_price,\n        uint256 _projest_deadline_date_unix,\n        uint256 _project_minimum_fund_price,\n        address _projectOwner,\n        address _contractAddress,\n        bytes32 _ipfs_cid\n    );\n\n    //Functions\n    function createNewProject(\n        string memory _title,\n        string memory _description,\n        uint256 _project_target_price,\n        uint256 _projest_deadline_date_unix,\n        uint256 _project_minimum_fund_price,\n        bytes32 _ipfs_cid\n    ) public {\n        uint16 projectID = uint16(_contractId.current());\n        Project project = new Project(\n            projectID,\n            _title,\n            _description,\n            _project_target_price,\n            _projest_deadline_date_unix,\n            _project_minimum_fund_price,\n            msg.sender,\n            _ipfs_cid\n        );\n\n        projects.push(ProjectEntity(projectID, address(project)));\n        _contractId.increment();\n\n        // emit event for project creation\n        emit ProjectStarted(\n            projectID,\n            _title,\n            _description,\n            _project_target_price,\n            _projest_deadline_date_unix,\n            _project_minimum_fund_price,\n            msg.sender,\n            address(project),\n            _ipfs_cid\n        );\n    }\n\n    //State Functions\n    function markProjectFundingComplete(address _projectAddress)\n        public\n        onlyOwner\n    {\n        Project(payable(_projectAddress)).markFundingComplete();\n    }\n\n    //View Functions\n    function getProjectLists() public view returns (ProjectEntity[] memory) {\n        return projects;\n    }\n\n    function getProjectInfoById(uint16 _projectId)\n        public\n        view\n        returns (string memory _title, string memory _description)\n    {\n        for (uint i = 0; i < projects.length; i++) {\n            if (projects[i].projectId == _projectId) {\n                address payable projectAddress = payable(\n                    projects[i].projectAddress\n                );\n                return Project(projectAddress).getProjectDetails();\n            }\n        }\n    }\n\n    function getProjectInfoByAddress(address _address)\n        public\n        view\n        returns (string memory _title, string memory _description)\n    {\n        return Project(payable(_address)).getProjectDetails();\n    }\n\n    function getCurrentProjectID() public view returns (uint16) {\n        uint16 id = uint16(_contractId.current());\n        return id;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}